Instructions:
=============
1) Go to truecaller-hw folder.
2) run mvn package
3) run java -jar .\target\truecaller-hw-1.0.jar server example.yml
4) Start making REST calls now.

REST apis:
==========
1) GET : http://localhost:1334/user/hello
-> to check if /user endpoint is working

2) POST : http://localhost:1334/user/create/
-> create a user object inside Db
no params needed
will return the created object

3) POST : http://localhost:1334/user/add_view/1
-> to add a profile-view in user-object; 1 is the userId(viewee)
params:
{
  "id":2    (id of the viewer)
}
return the user's updated object

4) GET : http://localhost:1334/user/viewers/1
-> to view profile-views of a user
return array of viewers


Database Design:
================
Person Object:
Fields:
- id => long => unique id of a user/person; auto-generated 
- viewers => string => viewer object for this user, stored in form of json

Viewer Object:
Fields:
- id => long => unique of the viewer, who is viewing someone's profile
- timestamp => long => server's timestamp of the view
- dateTime => String => date & time of the view

WorkFlow:
=========
- New Person object is created for a NEW user(say, A). Id is autogenerated by system and viewers field is null at start.
- Some user B views user A's profile. User A's profile is loaded and its "viewers" field is deserialised into a list of viewer objects. Only valid(which passes the constraints) viewer objects are filtered from the list and NEW viewer object is added. viewer list is serialised into json and saved into user A's object, which is then updated into db.
- Viewers of A's profile : profile object loaded from db => viewer list deserialised form viewers field => only valid viewers filtered and sent as response.

Qs.:
====
Q1) Do you delete any data from database?
A: No, there is no need to delete anything explicitly. To update obsolete viewers, you just need to remove them while adding a new viewer in db, for a person object. Other then this there can be two ways to delete obsolete viewers objects and free data-space in db:
1) In my current design, before returning list of viewers for a particular user I filter invalid/obsolete viewers. After filtering we can also choose to update db also. But then multi-threading will come into picture and I've to synchronize that method and it will slow down the response. Hence I chose to update the object only in addProfileView() method.
2) A cron-job can be scheduled to periodically remove obsolete/invalid viewers object from Db. Though I've not configured one in my code.

Q2) Do you have any periodic task type of batch jobs to maintain data?
A: No I haven't coded any periodic task to remove obsolete/invalid viewer objects from db. But this type of task can be scheduled to free db data-space.

Q3) What type of compromise (for example; tradeoff between storage on disk vs latency) did you see? What was your decision? Why?
A: I don't particularly undestood the context of this question. But to save storage-space I chose to store viewer objects inside the person object itself rather than storing them inside a separate table. Because if stored in a separate table a LOT of DELETE req. needs to be fired to remove obsolete viewer object.


